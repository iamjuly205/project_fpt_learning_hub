{"ast":null,"code":"const express = require(\"express\");\nconst cors = require(\"cors\");\nconst dotenv = require(\"dotenv\");\nconst mongoose = require(\"mongoose\");\nconst cookieParser = require(\"cookie-parser\");\nconst authRoute = require(\"../backend/backend/backend-node/routes/auth\");\nconst userRoute = require(\"./routes/user\");\ndotenv.config();\nconst app = express();\n\n// Kết nối MongoDB\nmongoose.connect(process.env.MONGODB_URL, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log(\"CONNECTED TO MONGO DB\")).catch(err => console.error(\"MongoDB connection error:\", err));\n\n// Middleware\napp.use(cors({\n  origin: [\"http://localhost:3000\"],\n  credentials: true,\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\n  allowedHeaders: [\"Content-Type\", \"token\"]\n}));\napp.use(cookieParser());\napp.use(express.json());\n\n// Routes\napp.use(\"/v1/auth\", authRoute);\napp.use(\"/v1/user\", userRoute);\n\n// Xử lý lỗi\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({\n    message: \"Server error\",\n    error: err.message\n  });\n});\nconst PORT = process.env.PORT || 8000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","dotenv","mongoose","cookieParser","authRoute","userRoute","config","app","connect","process","env","MONGODB_URL","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","use","origin","credentials","methods","allowedHeaders","json","req","res","next","stack","status","message","PORT","listen"],"sources":["C:/fullstack web/web/frontend/src/index.js"],"sourcesContent":["const express = require(\"express\");\r\nconst cors = require(\"cors\");\r\nconst dotenv = require(\"dotenv\");\r\nconst mongoose = require(\"mongoose\");\r\nconst cookieParser = require(\"cookie-parser\");\r\nconst authRoute = require(\"../backend/backend/backend-node/routes/auth\");\r\nconst userRoute = require(\"./routes/user\");\r\n\r\ndotenv.config();\r\n\r\nconst app = express();\r\n\r\n// Kết nối MongoDB\r\nmongoose.connect(process.env.MONGODB_URL, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true,\r\n})\r\n.then(() => console.log(\"CONNECTED TO MONGO DB\"))\r\n.catch((err) => console.error(\"MongoDB connection error:\", err));\r\n\r\n// Middleware\r\napp.use(cors({\r\n  origin: [\"http://localhost:3000\"],\r\n  credentials: true,\r\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\", \"OPTIONS\"],\r\n  allowedHeaders: [\"Content-Type\", \"token\"],\r\n}));\r\napp.use(cookieParser());\r\napp.use(express.json());\r\n\r\n// Routes\r\napp.use(\"/v1/auth\", authRoute);\r\napp.use(\"/v1/user\", userRoute);\r\n\r\n// Xử lý lỗi\r\napp.use((err, req, res, next) => {\r\n  console.error(err.stack);\r\n  res.status(500).json({ message: \"Server error\", error: err.message });\r\n});\r\n\r\nconst PORT = process.env.PORT || 8000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server is running on port ${PORT}`);\r\n});"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,MAAM,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAU,CAAC;AACpC,MAAMI,YAAY,GAAGJ,OAAO,CAAC,eAAe,CAAC;AAC7C,MAAMK,SAAS,GAAGL,OAAO,CAAC,6CAA6C,CAAC;AACxE,MAAMM,SAAS,GAAGN,OAAO,CAAC,eAAe,CAAC;AAE1CE,MAAM,CAACK,MAAM,CAAC,CAAC;AAEf,MAAMC,GAAG,GAAGT,OAAO,CAAC,CAAC;;AAErB;AACAI,QAAQ,CAACM,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,WAAW,EAAE;EACxCC,eAAe,EAAE,IAAI;EACrBC,kBAAkB,EAAE;AACtB,CAAC,CAAC,CACDC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CAAC,CAChDC,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC,CAAC;;AAEhE;AACAX,GAAG,CAACa,GAAG,CAACpB,IAAI,CAAC;EACXqB,MAAM,EAAE,CAAC,uBAAuB,CAAC;EACjCC,WAAW,EAAE,IAAI;EACjBC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,CAAC;EACpDC,cAAc,EAAE,CAAC,cAAc,EAAE,OAAO;AAC1C,CAAC,CAAC,CAAC;AACHjB,GAAG,CAACa,GAAG,CAACjB,YAAY,CAAC,CAAC,CAAC;AACvBI,GAAG,CAACa,GAAG,CAACtB,OAAO,CAAC2B,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACAlB,GAAG,CAACa,GAAG,CAAC,UAAU,EAAEhB,SAAS,CAAC;AAC9BG,GAAG,CAACa,GAAG,CAAC,UAAU,EAAEf,SAAS,CAAC;;AAE9B;AACAE,GAAG,CAACa,GAAG,CAAC,CAACF,GAAG,EAAEQ,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC/Bb,OAAO,CAACI,KAAK,CAACD,GAAG,CAACW,KAAK,CAAC;EACxBF,GAAG,CAACG,MAAM,CAAC,GAAG,CAAC,CAACL,IAAI,CAAC;IAAEM,OAAO,EAAE,cAAc;IAAEZ,KAAK,EAAED,GAAG,CAACa;EAAQ,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,MAAMC,IAAI,GAAGvB,OAAO,CAACC,GAAG,CAACsB,IAAI,IAAI,IAAI;AACrCzB,GAAG,CAAC0B,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBjB,OAAO,CAACC,GAAG,CAAC,6BAA6BgB,IAAI,EAAE,CAAC;AAClD,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}